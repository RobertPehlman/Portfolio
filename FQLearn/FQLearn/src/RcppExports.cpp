// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP FQLearn_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP FQLearn_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP FQLearn_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP FQLearn_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// newProjectionNoStage
arma::vec newProjectionNoStage(arma::vec input, int p, int L);
RcppExport SEXP FQLearn_newProjectionNoStage(SEXP inputSEXP, SEXP pSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type input(inputSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(newProjectionNoStage(input, p, L));
    return rcpp_result_gen;
END_RCPP
}
// newLikelihoodNoStage
double newLikelihoodNoStage(arma::vec input, arma::uvec indices, double rho, int p, int L, arma::vec m, std::vector<arma::mat> B_T0, std::vector<arma::vec> data, std::vector<arma::vec> indexVec);
RcppExport SEXP FQLearn_newLikelihoodNoStage(SEXP inputSEXP, SEXP indicesSEXP, SEXP rhoSEXP, SEXP pSEXP, SEXP LSEXP, SEXP mSEXP, SEXP B_T0SEXP, SEXP dataSEXP, SEXP indexVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type input(inputSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type B_T0(B_T0SEXP);
    Rcpp::traits::input_parameter< std::vector<arma::vec> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::vec> >::type indexVec(indexVecSEXP);
    rcpp_result_gen = Rcpp::wrap(newLikelihoodNoStage(input, indices, rho, p, L, m, B_T0, data, indexVec));
    return rcpp_result_gen;
END_RCPP
}
// newGradientNoStage
arma::vec newGradientNoStage(arma::vec input, arma::uvec indices, double rho, int p, int L, arma::vec m, std::vector<arma::mat> B_T0, std::vector<arma::vec> data, std::vector<arma::vec> indexVec);
RcppExport SEXP FQLearn_newGradientNoStage(SEXP inputSEXP, SEXP indicesSEXP, SEXP rhoSEXP, SEXP pSEXP, SEXP LSEXP, SEXP mSEXP, SEXP B_T0SEXP, SEXP dataSEXP, SEXP indexVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type input(inputSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type B_T0(B_T0SEXP);
    Rcpp::traits::input_parameter< std::vector<arma::vec> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::vec> >::type indexVec(indexVecSEXP);
    rcpp_result_gen = Rcpp::wrap(newGradientNoStage(input, indices, rho, p, L, m, B_T0, data, indexVec));
    return rcpp_result_gen;
END_RCPP
}
// newDescentFullOnlyNoStage
arma::vec newDescentFullOnlyNoStage(arma::mat fulldata, arma::mat Obasis, arma::vec input, double rho, int p, int iter2, arma::vec stepsizes, double tol);
RcppExport SEXP FQLearn_newDescentFullOnlyNoStage(SEXP fulldataSEXP, SEXP ObasisSEXP, SEXP inputSEXP, SEXP rhoSEXP, SEXP pSEXP, SEXP iter2SEXP, SEXP stepsizesSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type fulldata(fulldataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Obasis(ObasisSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type input(inputSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type iter2(iter2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type stepsizes(stepsizesSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(newDescentFullOnlyNoStage(fulldata, Obasis, input, rho, p, iter2, stepsizes, tol));
    return rcpp_result_gen;
END_RCPP
}
